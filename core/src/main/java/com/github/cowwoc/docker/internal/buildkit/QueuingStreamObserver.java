package com.github.cowwoc.docker.internal.buildkit;

import com.github.cowwoc.docker.internal.client.InternalClient;
import com.github.cowwoc.docker.internal.util.Exceptions;
import io.grpc.StatusRuntimeException;
import io.grpc.stub.StreamObserver;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

import static com.github.cowwoc.requirements10.java.DefaultJavaValidators.that;

/**
 * A {@code StreamObserver} that adds incoming elements to a queue.
 *
 * @param <E> the type of elements returned by the stream
 */
public final class QueuingStreamObserver<E> implements StreamObserver<E>
{
	private final InternalClient client;
	private final E endOfStream;
	private final BlockingQueue<E> elements = new LinkedBlockingQueue<>();
	private final BlockingQueue<Throwable> exceptions = new LinkedBlockingQueue<>();

	/**
	 * Creates a new instance.
	 *
	 * @param client      the client configuration
	 * @param endOfStream the element that denotes the end of the stream
	 * @throws AssertionError if any of the arguments are null
	 */
	public QueuingStreamObserver(InternalClient client, E endOfStream)
	{
		assert that(client, "client").isNotNull().elseThrow();
		assert that(endOfStream, "endOfStream").isNotNull().elseThrow();
		this.client = client;
		this.endOfStream = endOfStream;
	}

	@Override
	public void onNext(E value)
	{
		elements.add(value);
	}

	@Override
	public void onError(Throwable t)
	{
		if (t instanceof StatusRuntimeException sre)
			exceptions.add(Exceptions.fromGrpc(sre, client.getJsonMapper()));
		else
			exceptions.add(t);
	}

	@Override
	public void onCompleted()
	{
		elements.add(endOfStream);
	}

	/**
	 * Returns the elements generated by the stream. The queue will return an {@code endOfStream} marker when
	 * the end of the stream has been reached.
	 *
	 * @return the elements
	 */
	public BlockingQueue<E> getElements()
	{
		return elements;
	}

	/**
	 * Returns the exceptions generated by the stream.
	 *
	 * @return the exceptions
	 */
	public BlockingQueue<Throwable> getExceptions()
	{
		return exceptions;
	}
}
