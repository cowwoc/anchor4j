package io.github.cowwoc.anchor4j.docker.resource;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.time.Instant;

/**
 * Retrieves a container's logs.
 */
public interface ContainerLogs
{
	/**
	 * Indicates that log entries should be streamed in real-time as they are generated by the container.
	 *
	 * @return this
	 */
	ContainerLogs follow();

	/**
	 * Configures the streams to only return logs since the specified time. Defaults to {@code null}.
	 *
	 * @param since the start time or {@code null} to omit
	 * @return this
	 */
	ContainerLogs since(Instant since);

	/**
	 * Configures the streams to only return logs until the specified time. Defaults to {@code null}.
	 *
	 * @param until the end time or {@code null} to omit
	 * @return this
	 */
	ContainerLogs until(Instant until);

	/**
	 * Indicates that logs should include timestamps at the beginning of every log line.
	 *
	 * @return this
	 */
	ContainerLogs timestamps();

	/**
	 * Configures the number of log lines to return relative to the end of the logs. By default, all lines are
	 * returned.
	 *
	 * @param linesFromEnd the number of lines or {@code Integer.MAX_VALUE} to return all lines
	 * @return this
	 * @throws IllegalArgumentException if {@code linesFromEnd} is negative
	 */
	ContainerLogs linesFromEnd(int linesFromEnd);

	/**
	 * Streams the container's logs.
	 *
	 * @return the stream
	 * @throws IOException if an I/O error occurs. These errors are typically transient, and retrying the
	 *                     request may resolve the issue.
	 */
	LogStreams stream() throws IOException;

	/**
	 * A container's stdout and stderr log streams.
	 */
	interface LogStreams
	{
		/**
		 * Returns the container's standard output as a byte stream.
		 *
		 * @return the output log
		 */
		InputStream getOutputStream();

		/**
		 * Returns the container's standard output as a {@code BufferedReader}, using the host's default character
		 * encoding.
		 *
		 * @return the output log
		 */
		BufferedReader getOutputReader();

		/**
		 * Returns the container's standard error as a byte stream.
		 *
		 * @return the error log
		 */
		InputStream getErrorStream();

		/**
		 * Returns the container's standard error as a {@code BufferedReader}, using the host's default character
		 * encoding.
		 *
		 * @return the error log
		 */
		BufferedReader getErrorReader();

		/**
		 * Blocks until the operation completes.
		 *
		 * @return the exit code returned by {@code docker logs}
		 * @throws InterruptedException if the thread is interrupted before the operation completes
		 */
		int waitFor() throws InterruptedException;
	}
}